import shap
import csv
import os
from catboost import CatBoostClassifier
import pandas as pd
import uuid
import zipfile
from shutil import copytree
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris


def waterfall(model, X_test):
    pred_idx = np.where(model.classes_ == model.predict(X_test)[0][0])[0][0] # first sample in test set is classified as pred_idx in model_classes_
    shap.waterfall_plot(shap.Explanation(values=shap_values[pred_idx][row],
                                              base_values=explainer.expected_value[pred_idx], data=X_test.iloc[row],
                                         feature_names=X_test.columns.tolist()),
                   max_display=30)


def load_model():
    model = CatBoostClassifier(
            loss_function='MultiClass',
            custom_metric='Accuracy',
            learning_rate=0.15,
            random_seed=42,
            l2_leaf_reg=3,
            iterations=3)
    model_path = os.path.join('/kb/module/data', 'model_app.json')
    model.load_model(model_path, format='json')
    return model


def load_inference_data():
    # inference data set's first column is data sample id
    inference_data_path = os.path.join('/kb/module/data', 'enigma.tsv')
    with open(inference_data_path, 'r') as f:
        df = pd.read_csv(f, sep="\t")
    X = df.iloc[:, 1:]
    sample_id = df[df.columns[0]]
    return sample_id, X


def inference(model, sample_ids, inference_data):
    prediction = model.predict(inference_data)
    output_file_path = os.path.join('/opt/work/outputdir', 'prediction.tsv')
    with open(output_file_path, 'w') as f:
        writer = csv.writer(f, delimiter="\t")
        writer.writerow(['Id', 'Predicted Biome'])
        for i in range(len(prediction)):
            writer.writerow([sample_ids[i], prediction[i][0]])
    return '/opt/work/outputdir'


def generate_output_file_list(result_directory, shared_folder):
    output_files = list()
    output_directory = os.path.join(shared_folder, str(uuid.uuid4()))
    os.mkdir(output_directory)
    result_file = os.path.join(output_directory, 'biome_classification_result.zip')

    with zipfile.ZipFile(result_file, 'w',
                         zipfile.ZIP_DEFLATED,
                         allowZip64=True) as zip_file:
        for root, dirs, files in os.walk(result_directory):
            for file in files:
                if file == 'prediction.tsv':
                    zip_file.write(os.path.join(root, file),
                                   os.path.join(os.path.basename(root), file))

    output_files.append({'path': result_file,
                         'name': os.path.basename(result_file),
                         'label': os.path.basename(result_file),
                         'description': 'File(s) generated by DESeq2 App'})
    return output_files






